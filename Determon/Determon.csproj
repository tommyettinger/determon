<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- Basic package info -->
    <TargetFrameworks>netstandard2.1;netcoreapp3.1;net5.0;net6.0</TargetFrameworks>
	<RootNamespace>Determon</RootNamespace>
	<Authors>tommyettinger</Authors>
	<Copyright>Copyright © 2021 Tommy Ettinger (tommyettinger)</Copyright>
	<Description>Deterministic decimal math library.</Description>

    <!--
    Configure versioning information, making sure to append "debug" to Debug version to allow publishing
    to NuGet seperately from Release version.
    -->
    <Version>0.0.1-alpha01</Version>
    <Version Condition="'$(Configuration)'=='Debug'">$(Version)-debug</Version>

	<!-- More nuget package settings-->
    <PackageId>Determon</PackageId>
	<PackageReleaseNotes>Prerelease Version</PackageReleaseNotes>
	<PackageProjectUrl>https://github.com/tommyettinger/Determon</PackageProjectUrl>
	<RepositoryUrl>https://github.com/tommyettinger/Determon</RepositoryUrl>
	<RepositoryType>git</RepositoryType>
	<PublishRepositoryUrl>true</PublishRepositoryUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
	<SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <PackageTags>deterministic;math;library;decimal;determon</PackageTags>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>

	<!-- Enable C# 8.0 and its nullable reference feature -->
    <LangVersion>8.0</LangVersion>
	<Nullable>enable</Nullable>

    <!--
    Warnings disabled project-wide:
        - CA1303: Exception strings are non-localized to avoid generating an exception within an exception
        - CA1305: Format providers are not used in string exception messages (again to avoid potentially generating an
                  exception inside an exception).
        - CA1051: Microsoft guidance on preferring readonly fields to get-only properties to avoid defensive copies
                  when it comes to structs directly contradicts this warning.  Instance fields are necessary for maximum
                  performance in many instances with value types.  Further, field exposure is required to allow passing
                  a parameter via "ref".
        - CA1307: In string comparisons in Determon, ordinal behavior is desired, as they are only compared for
                  equality, not sort-order.
        - CA2211: Determon specifically allows static mutable fields for configuration options like
                  GlobalRandom.DefaultRNG and Dice parsers.  These fields explicitly document that changing them is not
                  thread-safe behavior, and that they are meant as configuration to be performed during application
                  initialization.  This addresses the main concerns with static mutable fields (thread safety), without
                  costing non-trivial code complexity and performance.
        - CA1062: Nullability validation is performed by C#8 nullable reference types in Determon.
    -->
    <NoWarn>CA1303;CA1305;CA1051;CA1307;CA2211;CA1062</NoWarn>

    <!-- Generate documentation files for all configurations since Debug and Release are published to NuGet. -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <!-- Define trace constant for debug builds. -->
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net6.0|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net6.0|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net5.0|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net5.0|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|netcoreapp3.1|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netstandard2.1|AnyCPU'">
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|netcoreapp3.1|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|netstandard2.1|AnyCPU'">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <!-- Pack a read-me with the nuget package, so it displays when installed -->
  <ItemGroup>
    <Content Include="readme.txt">
      <Pack>true</Pack>
      <PackagePath>.</PackagePath>
    </Content>
  </ItemGroup>

  <!-- Dependencies -->
  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="6.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All" />
  </ItemGroup>

  <!-- When packing, copy the nuget files to the nuget output directory -->
  <Target Name="CopyPackage" AfterTargets="Pack">
    <Copy SourceFiles="$(OutputPath)$(PackageId).$(PackageVersion).nupkg" DestinationFolder="$(OutputPath)..\..\..\nuget" />
    <Copy SourceFiles="$(OutputPath)$(PackageId).$(PackageVersion).snupkg" DestinationFolder="$(OutputPath)..\..\..\nuget" />
  </Target>
</Project>
